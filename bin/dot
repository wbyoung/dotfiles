#!/usr/bin/env bash

cd "$(dirname "$0")/.."
shopt -s extglob

declare -A OPTIONS

if [ -t 1 ] && (
  (
  [ -x "$(command -v tput)" ] \
    && [ -n "$(tput colors)" ] \
    && [ "$(tput colors)" -ge 8 ] \
  ) \
  || [[ "$TERM" == *color* ]] \
  || [[ -n "$COLORTERM" ]] \
); then
    export CLICOLOR=true
fi

if [ "${CLICOLOR}" = "true" ] || [ "${CLICOLOR}" = "1" ]; then
    YELLOW="\033[0;33m"
    BLUE="\033[0;34m"
    MAGENTA="\033[0;35m"
    CYAN="\033[0;36m"
    RED="\033[0;31m"
    BOLD="\033[1m"
    RESET="\033[0m"
fi

dot-main() {
  parse-options "$@"
  install-all
}

install-all() {
  self-update
  is-darwin && want-to-install "homebrew" && install-homebrew
  want-to-install "zsh config" && install-files "zsh" "zshrc"
  want-to-install "vim config" && install-files "vim" "vim/vimrc"
  if want-to-install "git config"; then
    install-files "git" "git/*"
    is-option-set "git-sshcmd" && run-cmd bash -c "$HOME/.dotfiles/bin/setup-git-sshcmd"
    is-option-set "git-gpgssh" && run-cmd bash -c "$HOME/.dotfiles/bin/setup-git-gpgssh"
  fi
  want-to-install "tmux config" && install-files "tmux" "tmux/*"
  want-to-install "miscellaneous config" && install-files "misc" "misc/*"
  is-darwin && want-to-install "osx defaults" && run-cmd "osx/setup"
}

self-update() {
  log-info "[self-update]"
  run-cmd "git pull origin -q --ff-only"
}

install-homebrew() {
  log-info "[homebrew]"

  run-cmd which brew
  [[ $? -eq 0 ]] || run-cmd install-homebrew[via curl]
  run-cmd brew update
  run-cmd brew install -q cloc coreutils git gpg grc hub jq node python python3 tmux terminal-notifier the_silver_searcher zsh reattach-to-user-namespace vim
  run-cmd brew install -q --cask --appdir=/Applications flux google-chrome visual-studio-code
  run-cmd brew install -q --no-quarantine grishka/grishka/neardrop
}

install-files() {
  log-info "[$1]"
  shift

  for file in $@; do
    name=$(basename $file)
    basepath=$([[ "$(dirname "$PWD")" == "$HOME" ]] \
        && basename "$PWD" \
        || echo "$PWD")
    source="$basepath/$file"
    target="$HOME/.$name"
    overwrite_reason=""

    if [[ -L "$target" ]]; then
      if [[ "$(readlink "$target")" != "$source" ]]; then
        overwrite_reason="wrong symlink"
      fi
    elif [[ -e "$target" ]]; then
      overwrite_reason="not a symlink"
    fi

    if [[ -n "$overwrite_reason" ]]; then
      log-error "overwriting ${target} (${overwrite_reason}), leaving original at ${target}.backup"
      run-cmd mv "$HOME/.$name" "$HOME/.$name.backup"
    fi

    run-cmd ln -nfs "${source}" "${target}"
  done
}

install-homebrew() {
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

run-cmd() {
  log-detail "[exec] ${*}"

  if [[ "${OPTIONS["dry-run"]}" != "yes" ]]; then
    $@
  fi
}

log-info() {
  printf "${CYAN}${*}${RESET}\n"
}

log-detail() {
  printf "${MAGENTA}${*}${RESET}\n"
}

log-error () {
  printf "${RED}${*}${RESET}\n" 1>&2
}

is-darwin() {
  [[ "$OSTYPE" == darwin* ]] && return 0 || return 1
}

is-alpine-linux() {
  [[ -f /etc/os-release ]] \
    && [[ "$(source /etc/os-release && echo $ID)" == "alpine" ]] \
    && return 0 || return 1
}

is-fedora-linux() {
  [[ -f /etc/os-release ]] \
    && [[ "$(source /etc/os-release && echo $ID)" == "fedora" ]] \
    && return 0 || return 1
}

is-option-set() {
  [[ "${OPTIONS[${1}]}" == "yes" ]] \
    && return 0 || return 1
}

want-to-install() {
  section="${1}"
  option_key="${section// /-}"
  option_value="${OPTIONS[${option_key}]}"

  if [[ -n "$option_value" ]]; then
    is-option-set "$option_key"
    return $?
  elif is-option-set "prompt"; then
    printf "${CYAN}install ${section1}? ${MAGENTA}[y/n] ${RESET}\n"
    read response
    [[ "${response// /}" == "y" ]] \
      && return 0 || return 1
  elif is-option-set "choose"; then
    return 1 # for `--choose` the default is that nothing is installed
  else
    return 0 # the default is that everything is installed
  fi
}

parse-flag() {
  [[ "${1}" == "--no"* ]] && echo "no" || echo "yes"
}

parse-options() {
  while [ $# -ne 0 ]; do
    case "${1}" in
      -p|--?(no)prompt)
        OPTIONS["prompt"]=$(parse-flag "${1}")
        shift
        ;;
      -c|--choose)
        OPTIONS["choose"]="yes"
        shift
        ;;
      -d|--dry-run)
        OPTIONS["dry-run"]="yes"
        shift
        ;;
      --?(no)zsh-config)
        OPTIONS["zsh-config"]=$(parse-flag "${1}")
        shift
        ;;
      --?(no)vim-config)
        OPTIONS["vim-config"]=$(parse-flag "${1}")
        shift
        ;;
      --?(no)git-config)
        OPTIONS["git-config"]=$(parse-flag "${1}")
        shift
        ;;
      --?(no)git-config-sshcmd)
        OPTIONS["git-config-sshcmd"]=$(parse-flag "${1}")
        shift
        ;;
      --?(no)git-config-gpgssh)
        OPTIONS["git-config-gpgssh"]=$(parse-flag "${1}")
        shift
        ;;
      --?(no)tmux-config)
        OPTIONS["tmux-config"]=$(parse-flag "${1}")
        shift
        ;;
      --?(no)homebrew)
        OPTIONS["homebrew"]=$(parse-flag "${1}")
        shift
        ;;
      --?(no)miscellaneous-config)
        OPTIONS["miscellaneous-config"]=$(parse-flag "${1}")
        shift
        ;;
      --?(no)osx-defaults)
        OPTIONS["osx-defaults"]=$(parse-flag "${1}")
        shift
        ;;
      -h|--help)
        usage
        exit 0
        ;;
      *)
        log-error "invalid argument: ${1}"
        usage
        exit 1
        ;;
    esac
  done
}

usage() {
  echo "Usage:"
  echo "	dot [options]"
  echo
  echo "Options:"
  echo "	-p, --[no-]prompt	Prompt to install each item"
  echo "	-c, --choose	Require opting to install each item"
  echo "	-d, --dry-run	Do not actually run commands"
  echo "	--[no-]git-config-gpgssh"
  echo "	--[no-]git-config-sshcmd"
  echo "	--[no-]git-config"
  echo "	--[no-]homebrew"
  echo "	--[no-]miscellaneous-config"
  echo "	--[no-]osx-defaults"
  echo "	--[no-]tmux-config"
  echo "	--[no-]vim-config"
  echo "	--[no-]zsh-config"
  echo "	--help"
}

dot-main "$@"
