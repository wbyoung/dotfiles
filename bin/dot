#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'pathname'

$OPTIONS = {}

# TODO: is `xcode-select --install` required on a fresh machine?
# TODO: is `sudo apt-get install build-essential` required on a fresh machine?

def install_all
  selfupdate
  install_homebrew if RUBY_PLATFORM.downcase.include?("darwin") and want_to_install?('homebrew')
  install_files('zsh', Dir.glob('zshrc')) if want_to_install?('zsh config')
  install_files('vim', Dir.glob('vim/vimrc')) if want_to_install?('vim config')
  if want_to_install?('git config')
    install_files('git', Dir.glob('git/*'))
    run %{bash -c "#{ENV["HOME"]}/.dotfiles/bin/setup-git-sshcmd"} if $OPTIONS[:git_sshcmd]
    run %{bash -c "#{ENV["HOME"]}/.dotfiles/bin/setup-git-gpgssh"} if $OPTIONS[:git_gpgssh]
  end
  install_files('tmux', Dir.glob('tmux/*')) if want_to_install?('tmux config')
  install_files('misc', Dir.glob('misc/*')) if want_to_install?('miscellaneous config')
  run %{osx/setup} if RUBY_PLATFORM.downcase.include?("darwin") and want_to_install?('osx defaults')
end

def selfupdate
  info "[selfupdate]"

  run %{git pull origin -q --ff-only}
end

def install_homebrew
  info "[homebrew]"

  run %{which brew}
  run %{bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"} unless $?.success?
  run %{brew update}
  run %{brew install -q cloc coreutils git gpg grc hub jq node python python3 tmux terminal-notifier the_silver_searcher zsh reattach-to-user-namespace vim}
  run %{brew install -q --cask --appdir=/Applications flux google-chrome visual-studio-code}
  run %{brew install -q --no-quarantine grishka/grishka/neardrop}
end

def install_files(title, files)
  info "[#{title}]"

  files.each do |f|
    file = f.split('/').last
    source = Pathname.new("#{Dir.getwd}/#{f}").relative_path_from(Pathname.new(ENV["HOME"])).to_s
    target = "#{ENV["HOME"]}/.#{file}"

    if File.exist?(target) && (!File.symlink?(target) || (File.symlink?(target) && File.readlink(target) != source))
      error "overwriting #{target}, leaving original at #{target}.backup"
      run %{mv "$HOME/.#{file}" "$HOME/.#{file}.backup"}
    end

    run %{ln -nfs "#{source}" "#{target}"}
  end
end

private

module Tty extend self
  def red; regular 31; end
  def cyan; regular 36; end
  def magenta; bold 35; end
  def reset; escape 0; end
  def regular n; escape "0;#{n}" end
  def bold n; escape "1;#{n}" end
  def escape n; "\033[#{n}m" if STDOUT.tty? end
end

def run(cmd)
  detail "[exec] #{cmd}"
  `#{cmd}` unless ENV['DEBUG']
end

def info(message)
  puts "#{Tty.cyan}#{message}#{Tty.reset}"
end

def detail(message)
  puts "#{Tty.magenta}#{message}#{Tty.reset}"
end

def error(message)
  puts "#{Tty.red}#{message}#{Tty.reset}"
end

def is_alpine_linux?()
  not (File.read('/etc/os-release') =~ /alpine linux/i).nil?
end

def want_to_install?(section)
  option_key = section.gsub(/\s+/, '_').to_sym
  if $OPTIONS.has_key? option_key
    $OPTIONS[option_key]
  elsif $OPTIONS[:prompt]
    print "#{Tty.cyan}install #{section}? #{Tty.magenta}[y/n] #{Tty.reset}"
    STDIN.gets.chomp == 'y'
  else
    $OPTIONS[:choose] != true
  end
end

if __FILE__ == $0
  OptionParser.new do |opts|
    opts.banner = "Usage: install [options]"

    opts.on("-p", "--[no-]prompt", "Prompt to install each item") do |flag|
      $OPTIONS[:prompt] = flag
    end
    opts.on("-c", "--choose", "Require opting to install each item") do |flag|
      $OPTIONS[:choose] = true
    end

    opts.on("--[no-]zsh-config") do |flag|
      $OPTIONS[:zsh_config] = flag
    end
    opts.on("--[no-]vim-config") do |flag|
      $OPTIONS[:vim_config] = flag
    end
    opts.on("--[no-]git-config") do |flag|
      $OPTIONS[:git_config] = flag
    end
    opts.on("--[no-]git-config-sshcmd") do |flag|
      $OPTIONS[:git_sshcmd] = flag
    end
    opts.on("--[no-]git-config-gpgssh") do |flag|
      $OPTIONS[:git_gpgssh] = flag
    end
    opts.on("--[no-]tmux-config") do |flag|
      $OPTIONS[:tmux_config] = flag
    end
    opts.on("--[no-]homebrew") do |flag|
      $OPTIONS[:homebrew] = flag
    end
    opts.on("--[no-]miscellaneous-config") do |flag|
      $OPTIONS[:miscellaneous_config] = flag
    end
    opts.on("--[no-]osx-defaults") do |flag|
      $OPTIONS[:osx_defaults] = flag
    end
  end.parse!

  Dir.chdir "#{File.dirname(__FILE__)}/.." do
    install_all
  end

end
